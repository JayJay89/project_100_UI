/////////////////////////////////////////////
////// Dropdown Menus
////// 01 Base
////// 02 Disabled State
////// 03 Dropdown Menu Open State
////// 04 Menu Positioning
////// 05 Component Alignment
/////////////////////////////////////////////

/**=====================================**/
/* 01 Base */
/**=====================================**/
// Dropdown arrow/caret
.caret {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 2px;
  vertical-align: middle;
  border-top:   $caret-width-base dashed;
  border-top:   $caret-width-base solid \9; // IE8
  border-right: $caret-width-base solid transparent;
  border-left:  $caret-width-base solid transparent;
}

// The dropdown wrapper (div)
.dropup,
.dropdown {
  position: relative;
}

// Prevent the focus on the dropdown toggle when closing dropdowns
.dropdown-toggle:focus {
  outline: 0;
}

// The dropdown menu (ul)
.dropdown-menu {
  z-index: $zindex-navbar-dropdown;
  /*display: none;*/ // none by default, but block on "open" of the menu, is disabled as pikto use onhover to show the dropdown instead of onclick
  float: left;
  min-width: 160px;
  margin: 2px 0 0; // override default ul
  list-style: none;
  font-size: $font-size-base;
  top: 20px;
  position: absolute;
  // Ensures proper alignment if parent has it changed (e.g., modal footer)
  text-align: left; 
  background-color: $dark-purple-grey-03;

  // IE8 fallback
  border: 0px solid $dropdown-fallback-border; 
  border: 0px solid $dropdown-border;
  border-radius: $border-radius-base;
  background-clip: padding-box;
  padding: 20px;
  
  // Dividers (basically an hr) within the dropdown
  .divider {
    @include nav-divider($dropdown-divider-bg);
  }

  // Links within the dropdown menu
  > li {

    > a,
    > button {
      padding: 5px 0px;
      display: inline-block;
      font-weight: normal;
      line-height: $line-height-base;
      white-space: nowrap;  // prevent links from randomly breaking onto new lines
    }
  }

  &.dropdown-menu-right {
    top: -20px;
    right: calc(-100% - 60px - 5px);
  }

  &.dropdown-menu-left {
    top: -20px;
    left: calc(-100% - 60px - 5px);
  }
}

// Submenu
.dropdown-submenu {
  position: relative;

  &:hover {
    > .dropdown-menu {
      display: block;
    }
  }
}

// Hover/Focus state
.dropdown-menu > li > a {

  &:hover,
  &:focus {
    // text-decoration: none;
    // color: $dropdown-link-hover-color;
    // background-color: $dropdown-link-hover-bg;
  }
}

// Active state
.dropdown-menu > .active > a {

  &,
  &:hover,
  &:focus {
    color: $dropdown-link-active-color;
    text-decoration: none;
    outline: 0;
    background-color: $dropdown-link-active-bg;
  }
}

/**=====================================**/
/* 02 Disabled State */
/**=====================================**/
// Gray out text and ensure the hover/focus state remains gray

.dropdown-menu > .disabled > a {
  &,
  &:hover,
  &:focus {
    color: $dropdown-link-disabled-color;
  }

  &:hover,
  &:focus {
    text-decoration: none;
    background-color: transparent;
    background-image: none; // Remove CSS gradient
    @include reset-filter;
    cursor: $cursor-disabled;
  }
}

/**=====================================**/
/* 03 Dropdown Menu Open State */
/**=====================================**/
  // Open state for the dropdown (from bootstrap)
  .open { 
    // Show the menu
    > .dropdown-menu {
      display: block;
    }

    // Remove the outline when :focus is triggered
    > a {
      outline: 0;
    }
  }

// Hide/show and animation of dropdown menus and submenus.
// The transition and/or delay durations are needed so that a menu won't appear or disappear *immediately* when the user enters or leaves the hover element.
// This prevents the menu from popping up unwanted when the user is moving their mouse *over* the element to try to reach something else.
// It also prevents the menu from closing prematurely when the user moves their mouse over a gap, or tries to reach a sub-menu with a diagonal motion.
// Note: If we want two menus to never appear at once, then we should ensure that the display delay = hide delay + hide duration.
// But we need a longer delay before opening the main menu.  Otherwise it is easy to accidentally open the menu (and click it!) when aiming for something clickable at the top of the sidebar!
// (Designers/developers with high quality hardware might not notice this so easily!)
// Still, even with a large delay, mistakes are still possible (for users with slow hands).  Therefore we might want to make this a click-to-open menu, and only perform open-on-hover for submenus.  (I saw more opponents than proponents of hover-to-dropdown menus on UX.stackexchange.)
// Of course, another way to combat this is to move things away from the top of the sidebar!

.dropdown > .dropdown-menu,
.dropdown-submenu > .dropdown-menu {
  visibility: hidden;
  @include opacity(0);
  @include transition (all 0.1s linear 0.1s);
}

.dropdown:hover > .dropdown-menu,
.dropdown-submenu:hover > .dropdown-menu,
.dropdown.hover > .dropdown-menu,
.dropdown-submenu.hover > .dropdown-menu {
  visibility: visible;
  @include opacity(1);
  @include transition (all 0.1s linear 0.2s);
}

/**=====================================**/
/* 04 Menu Positioning */
/**=====================================**/
// Add extra class to `.dropdown-menu` to flip the alignment of the dropdown
// menu with the parent.
.dropdown-menu-right {
  left: auto; // Reset the default from `.dropdown-menu`
  right: 0;
}
// With v3, we enabled auto-flipping if you have a dropdown within a right
// aligned nav component. To enable the undoing of that, we provide an override
// to restore the default dropdown menu alignment.
//
// This is only for left-aligning a dropdown menu within a `.navbar-right` or
// `.pull-right` nav component.
.dropdown-menu-left {
  left: 0;
  right: auto;
}

// Dropdown section headers
.dropdown-header {
  display: block;
  padding: 3px 20px;
  font-size: $font-size-small;
  line-height: $line-height-base;
  color: $dropdown-header-color;
  white-space: nowrap; // as with > li > a
}

// Backdrop to catch body clicks on mobile, etc.
.dropdown-backdrop {
  @include fixed(top 0 bottom 0 right 0 left 0);
  z-index: ($zindex-navbar-dropdown - 10);
}

// Right aligned dropdowns
.pull-right > .dropdown-menu {
  right: 0;
  left: auto;
}

// Allow for dropdowns to go bottom up (aka, dropup-menu)
//
// Just add .dropup after the standard .dropdown class and you're set, bro.
// TODO: abstract this so that the navbar fixed styles are not placed here?

.dropup,
.navbar-fixed-bottom .dropdown {
  // Reverse the caret
  .caret {
    border-top: 0;
    border-bottom: $caret-width-base dashed;
    border-bottom: $caret-width-base solid \9; // IE8
    content: "";
  }

  // Different positioning for bottom up menu
  .dropdown-menu {
    top: auto;
    bottom: 100%;
    margin-bottom: 2px;
  }
}


  /**=====================================**/
  /* 05 Component Alignment */
  /**=====================================**/
// Reiterate per navbar.less and the modified component alignment there.

@media (min-width: $grid-float-breakpoint) {
  .navbar-right {
    .dropdown-menu {
      right: 0; left: auto;
    }

    // Necessary for overrides of the default right aligned menu.
    // Will remove come v4 in all likelihood.
    .dropdown-menu-left {
      left: 0; right: auto;
    }
  }
}

@media (min-width: 768px) {
  .navbar-right .dropdown-menu {
    right: 0;
    left: auto;
  }
}
