/////////////////////////////////////////////
////// Mixins
////// 01 Utitlities
//////////// 01a Hide Text
//////////// 01b Image
//////////// 01c Labels
//////////// 01d Opacity
//////////// 01f Reset Filter
//////////// 01g Reset Text
//////////// 01h Resize
//////////// 01i Responsive Visibility
//////////// 01j Size
//////////// 01k Tab Focus
//////////// 01l Text Emphasis
//////////// 01m Text Overflow
//////////// 01n Vendor Prefixes
//////////////////// 01n01 Animations
//////////////////// 01n02 Backface Visibility
//////////////////// 01n03 Box Shadow
//////////////////// 01n04 Box Sizing
//////////////////// 01n05 Content Columns
//////////////////// 01n06 Hyphens
//////////////////// 01n07 Placeholder Text
//////////////////// 01n08 Transformations
//////////////////// 01n09 Transitions
//////////////////// 01n10 User Select
////// 02 Components
//////////// 02a Alerts
//////////// 02b Buttons
//////////// 02c Forms
//////////// 02d List Group
//////////// 02e Nav Divider
//////////// 02f Pagination
//////////// 02g Panels
//////////// 02h Progress Bar
//////////// 02i Table Row
////// 03 Skins
//////////// 03a Background Variant
//////////// 03b Border Radius
//////////// 03c Gradients
////// 04 Layout
//////////// 04a Clearfix
//////////// 04b Center Block
//////////// 04c Grid
//////////// 04d Grid Framework
//////////// 04e Nav Vertical Align
////// 05 Pikto
//////////// 05a Links
//////////// 05b Icon Links
//////////// 05c Media Queries
//////////// 05d Position
//////////// 05e Size
//////////// 05f Typography
//////////// 05g Sprite
//////////// 05h SVG bgposition
////// 06 Dashboard Lists Grid
////// 07 Flex
/////////////////////////////////////////////

/**=====================================**/
/* 01 Utilities */
/**=====================================**/
/* 01a Hide Text */
/**=====================================**/
// CSS image replacement
//
// Heads up! v3 launched with only `.hide-text()`, but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// Deprecated as of v3.0.1 (has been removed in v4)
@mixin hide-text() {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}

// New mixin to use as of v3.0.1
@mixin text-hide() {
  @include hide-text;
}

/**=====================================**/
/* 01b Image */
/**=====================================**/
// Responsive image
// Keep images from scaling beyond the width of their parents.
@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

// Retina image
// Short retina mixin for setting background-image and -size. Note that the
// spelling of `min--moz-device-pixel-ratio` is intentional.
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path("#{$file-1x}"), "#{$file-1x}"));

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url(if($bootstrap-sass-asset-helper, twbs-image-path("#{$file-2x}"), "#{$file-2x}"));
    background-size: $width-1x $height-1x;
  }
}

/**=====================================**/
/* 01d Opacity */
/**=====================================**/
@mixin opacity($opacity, $important: no) {
  @if $important == isImportant {
    opacity: $opacity !important;
    $opacity-ie: $opacity * 100 !important;
    filter: alpha(opacity=$opacity-ie) !important; //IE8
  } @else {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
  }
}

/**=====================================**/
/* 01f Reset Filter */
/**=====================================**/
// Reset filters for IE
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.

@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}

/**=====================================**/
/* 01f Reset Text */
/**=====================================**/
@mixin reset-text() {
  font-family: $proxima-regular;
  // We deliberately do NOT reset font-size.
  font-style: normal; 
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: $line-height-base;
  // Fallback for where `start` is not supported
  text-align: left; 
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}

/**=====================================**/
/* 01h Resize */
/**=====================================**/
@mixin resizable($direction) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Per CSS3 UI, `resize` only applies when `overflow` isn't `visible`
}

/**=====================================**/
/* 01i Responsive Visibility */
/**=====================================**/
// More easily include all the states for responsive-utilities.less.
// [converter] $parent hack
@mixin responsive-visibility($parent) {
  #{$parent} {
    display: block !important;
  }

  table#{$parent} {
    display: table !important;
  }

  tr#{$parent} {
    display: table-row !important;
  }

  th#{$parent}, td#{$parent} {
    display: table-cell !important;
  }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

/**=====================================**/
/* 01j Size */
/**=====================================**/
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}

/**=====================================**/
/* 01k Tab Focus */
/**=====================================**/
@mixin tab-focus() {
  outline: none;
}

/**=====================================**/
/* 01l Text Emphasis */
/**=====================================**/
// [converter] $parent hack
@mixin text-emphasis-variant($parent, $color) {
  #{$parent} {
    color: $color;
  }

  a#{$parent}:hover,
  a#{$parent}:focus {
    color: darken($color, 57%);
    /* Original Value is 10%, but current value is set to 57% in typography.scss */
    // color: darken($color, 10%);
  }
}

/**=====================================**/
/* 01m Text Overflow */
/**=====================================**/
// Requires inline-block or block for proper styling

@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**====================================**/
/* 01n Vendor Prefix (Bootstrap) */
/**====================================**/
@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

// Vendor Prefixes
// All vendor mixins are deprecated as of v3.2.0 due to the introduction of
// Autoprefixer in our Gruntfile. They have been removed in v4.

// - 01n01 Animations
// - 01n02 Backface visibility
// - 01n03 Box shadow
// - 01n04 Box sizing
// - 01n05 Content columns
// - 01n06 Hyphens
// - 01n07 Placeholder text
// - 01n08 Transformations
// - 01n09 Transitions
// - 01n10 User Select

/**====================================**/
/* 01n01 Animations */
/**====================================**/
@mixin animation($animation) {
  -webkit-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

@mixin animation-name($name) {
  -webkit-animation-name: $name;
  animation-name: $name;
}

@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
}

@mixin animation-timing-function($timing-function) {
  -webkit-animation-timing-function: $timing-function;
  animation-timing-function: $timing-function;
}

@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin animation-iteration-count($iteration-count) {
  -webkit-animation-iteration-count: $iteration-count;
  animation-iteration-count: $iteration-count;
}

@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
  animation-direction: $direction;
}

@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
  animation-fill-mode: $fill-mode;
}

/**====================================**/
/* 01n02 Backface Visibility */
/**====================================**/
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`

@mixin backface-visibility($visibility) {
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  backface-visibility: $visibility;
}

/**====================================**/
/* 01n03 Box Shadow */
/**====================================**/
// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
// supported browsers that have box shadow capabilities now support it.

@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
  box-shadow: $shadow;
}

/**====================================**/
/* 01n04 Box Sizing */
/**====================================**/
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  -moz-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}

/**====================================**/
/* 01n05 Content Columns */
/**====================================**/
@mixin content-columns($column-count, $column-gap: $grid-gutter-width) {
  -webkit-column-count: $column-count;
  -moz-column-count: $column-count;
  column-count: $column-count;
  -webkit-column-gap: $column-gap;
  -moz-column-gap: $column-gap;
  column-gap: $column-gap;
}

/**====================================**/
/* 01n06 Hyphens */
/**====================================**/
@mixin hyphens($mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: $mode;
  -moz-hyphens: $mode;
  -ms-hyphens: $mode; // IE10+
  -o-hyphens: $mode;
  hyphens: $mode;
}

/**====================================**/
/* 01n07 Placeholder Text */
/**====================================**/
@mixin placeholder($color: $grey-alternate-7) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

/**====================================**/
/* 01n08 Transformations */
/**====================================**/
@mixin transform($transforms) {
  -webkit-transform: $transforms;
  -ms-transform:   $transforms; // IE9 only
  -o-transform:   $transforms;
  transform:   $transforms;
}

// Scale
@mixin scale($ratio) {
  @include transform(scale($ratio));
}

@mixin scaleX($ratio) {
  @include transform(scaleX($ratio));
}

@mixin scaleY($ratio) {
  @include transform(scaleY($ratio));
}

// Skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

// Translate
@mixin translateX ($x) {
  @include transform(translateX($x));
}
@mixin translateY ($y) {
  @include transform(translateY($y));
}
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// translate3D
@mixin translate3d($x, $y, $z) {
  @include transform(translate3d($x, $y, $z));
}

// Rotate
@mixin rotate($degrees) {
  @include transform(rotate(#{$degrees}deg));
}

@mixin rotateX($degrees) {
  @include transform(rotateX(#{$degrees}deg));
}

@mixin rotateY($degrees) {
  @include transform(rotateY(#{$degrees}deg));
}

@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  perspective: $perspective;
}

@mixin perspective-origin($perspective) {
  -webkit-perspective-origin: $perspective;
  -moz-perspective-origin: $perspective;
  perspective-origin: $perspective;
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin; // IE9 only
  transform-origin: $origin;
}

/**====================================**/
/* 01n09 Transitions */
/* eg. @include transition(all 0.2s ease-in-out); */
/**====================================**/
@mixin transition($transition...) {
  -webkit-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
  transition-property: $transition-property;
}

@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}

@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}

@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
  transition-timing-function: $timing-function;
}

@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
  -moz-transition: -moz-transform $transition;
  -o-transition: -o-transform $transition;
  transition: transform $transition;
}

/**====================================**/
/* 01n10 User Select */
/**====================================**/
// For selecting text on the page
@mixin user-select($select) {
  -khtml-user-select: $select;
  -webkit-user-select: $select;
  -moz-user-select: $select;
  -ms-user-select: $select; // IE10+
  -o-user-select: $select;
  user-select: $select;
}

/**=====================================**/
/* 02 Components */
/**=====================================**/

/**=====================================**/
/* 02c Forms (Bootstrap) */
/**=====================================**/
// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

@mixin form-control-validation($text-color: #555, $border-color: #ccc, $background-color: #f5f5f5) {

  // Color the label and help text
  .help-block,
  .control-label,
  .radio,
  .checkbox,
  .radio-inline,
  .checkbox-inline,
  &.radio label,
  &.checkbox label,
  &.radio-inline label,
  &.checkbox-inline label  {
    color: $text-color;
  }

  // Set the border and box shadow on specific inputs to match
  .form-control {
    /*border-color: $border-color;
    @include box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work*/
    @include border-radius()

   /* &:focus {
      border-color: darken($border-color, 10%);
      $shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($border-color, 20%);
      @include box-shadow($shadow);
    }*/
  }

  // Optional feedback icon
  .form-control-feedback {
    color: $text-color;
  }
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `$teal` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.
@mixin form-control-focus($color: $teal) {
  $color-rgba: rgba(red($color), green($color), blue($color), 1);
  &:focus {
    border-color: $color;
    outline: 0;
    @include box-shadow(inset 0 0 0 1px $color-rgba);
  }
}

/**=====================================**/
/* 02d List Groups */
/**=====================================**/
@mixin transform($transforms) {
  // -moz-transform: $transforms;
  // -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

/**=====================================**/
/* 02e Nav Dividers */
/**=====================================**/
// Horizontal dividers
// Dividers (basically an hr) within dropdowns and nav lists

@mixin nav-divider($color: #e5e5e5) {
  height: 1px;
  margin: (($line-height-computed / 2) - 1) 0;
  overflow: hidden;
  background-color: $color;
}

/**=====================================**/
/* 02f Pagination (Bootstrap) */
/**=====================================**/
@mixin pagination-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
  > li {
    > a,
    > span {
      padding: $padding-vertical $padding-horizontal;
      font-size: $font-size;
      line-height: $line-height;
    }
    &:first-child {
      > a,
      > span {
        @include border-radius("left");
      }
    }
    &:last-child {
      > a,
      > span {
        @include border-radius("right");
      }
    }
  }
}

/**=====================================**/
/* 02g Panels (Bootstrap) */
/**=====================================**/
@mixin panel-variant($border, $heading-text-color, $heading-bg-color, $heading-border) {
  border-color: $border;

  & > .panel-heading {
    color: $heading-text-color;
    background-color: $heading-bg-color;
    border-color: $heading-border;

    + .panel-collapse > .panel-body {
      border-top-color: $border;
    }

    .badge {
      color: $heading-bg-color;
      background-color: $heading-text-color;
    }
  }

  & > .panel-footer {
    + .panel-collapse > .panel-body {
      border-bottom-color: $border;
    }
  }
}

/**=====================================**/
/* 02i Table Row (Bootstrap) */
/**=====================================**/
// Tables

@mixin table-row-variant($state, $background) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table > thead > tr,
  .table > tbody > tr,
  .table > tfoot > tr {
    > td.#{$state},
    > th.#{$state},
    &.#{$state} > td,
    &.#{$state} > th {
      background-color: $background;
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover > tbody > tr {
    > td.#{$state}:hover,
    > th.#{$state}:hover,
    &.#{$state}:hover > td,
    &:hover > .#{$state},
    &.#{$state}:hover > th {
      background-color: darken($background, 5%);
    }
  }
}

/**=====================================**/
/* 03 Skins */
/**=====================================**/
/* 03a Background Variants */
/**=====================================**/
// Contextual backgrounds
// [converter] $parent hack
@mixin bg-variant($parent, $color) {

  #{$parent} {
    background-color: $color;
  }

  a#{$parent}:hover,
  a#{$parent}:focus {
    background-color: darken($color, 10%);
  }
}

/**=====================================**/
/* 03c Gradients */
/**=====================================**/
// Horizontal gradient, from left to right
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}

@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}

@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}

/**=====================================**/
/* 04 Layouts */
/**=====================================**/
/* 04a Clearfix */
/**=====================================**/
// Clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }

  &:after {
    clear: both;
  }
}

/**=====================================**/
/* 04b Center Block */
/**=====================================**/
// Center-align a block level element

@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

/**=====================================**/
/* 04c Grid */
/**=====================================**/
// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}

/**=====================================**/
/* 04d Grid Framework */
/**=====================================**/
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

/**=====================================**/
/* 04e Nav Vertical Align */
/**=====================================**/
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.

@mixin navbar-vertical-align($element-height) {
  margin-top: (($navbar-height - $element-height) / 2);
  margin-bottom: (($navbar-height - $element-height) / 2);
}

/**=====================================**/
/* 05c Media Queries */
/**=====================================**/
@mixin min-screen($width) {
  @media screen and (min-width:$width) {
    @content;
  }
}

@mixin max-screen($width) {
  @media screen and (max-width:$width) {
    @content;
  }
}

@mixin screen($min-width, $max-width) {
  @media screen and (min-width:$min-width) and (max-width:$max-width) {
    @content;
  }
}

@mixin min-only-screen($width) {
  @media screen and (min-device-width:$width) {
    @content;
  }
}

@mixin max-only-screen($width) {
  @media screen and (max-device-width:$width) {
    @content;
  }
}

@mixin only-screen($min-width, $max-width) {
  @media screen and (min-device-width:$min-width) and (max-device-width:$max-width) {
    @content;
  }
}
/**=====================================**/
/* 05d Position */
/* e.g. @include absolute(top 0 left 1em); */
/**====================================**/
@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;

  @each $offset in $offsets {
    // All this code happens inside the loop
    $index: index($args, $offset);

    // If offset is found in the list
    @if $index {

      // If it is found at last position
      @if $index == length($args) {
        #{$offset}: 0;
      }

      // If it is followed by a value
      @else {
        $next: nth($args, $index + 1);

        // If the next value is value length
        @if is-valid-length($next) {
          #{$offset}: $next;
        }

        // If the next value is another offset
        @else if index($offsets, $next) {
          #{$offset}: 0;
        }

        // If it is invalid
        @else {
          @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
        }
      }
    }
  }
}

@mixin absolute($args) {
  @include position(absolute, $args);
}

@mixin fixed($args) {
  @include position(fixed, $args);
}

@mixin relative($args) {
  @include position(relative, $args);
}

@mixin vertical-center {
  top: 50%;
  @include translate(0%, -50%);
}
@mixin horizontal-center {
  right: 50%;
  @include translate(50%, 0%);
}
@mixin centralize {
  top: 50%;
  left: 50%;
  @include translate(-50%, -50%);
}
/**=====================================**/
/* 05e Size */
/**=====================================**/
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/**====================================**/
/* 05f Typographhy */
/**====================================**/
@mixin font-base {
  color: $text-color;
  font-family: $proxima-regular;
  font-size: $font-size-base;
  line-height: $line-height-base;
}

/**====================================**/
/* 05g Sprite */
/**====================================**/

@mixin bgpos ($width, $height) {
  background-position: $width * -32px $height * -32px;
}

@mixin bgposAdj ($width, $height, $widthAdj, $heightAdj) {
  background-position: ($width * -32px) + $widthAdj ($height * -32px) + $heightAdj;
}

/**====================================**/
/* 05h SVG bgposition */
/**====================================**/
@mixin svgbgpos ($width, $height) {
  background-position: (calc(#{$width} * #{$x-row-width})) (calc(#{$height} * #{$y-column-height}));
}

/**====================================**/
/* 06 Dashboard Lists Grid */
/**====================================**/
@mixin get_width_gutter_list($val, $no_column) {
  $gutter: $val * ($no_column - 1); // no. of column minus 1 to get the gutter value
  $width: 100-$gutter;
  $margin_val: $val;
  width: ($width / $no_column) *1%;
  margin-right: $margin_val * 1%;
  $nth_child: $no_column;

  &:nth-child(#{$nth_child}n) {
    margin-right: 0px;
  }

  $previous_child_reset: $no_column;

  @if $previous_child_reset < 5 {
    &:nth-child(#{$previous_child_reset + 1}n) {
      margin-right: inherit;
    }
  } else {
    //nothing
  }
}

/**====================================**/
/* 07 Flex */
/**====================================**/
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}

.wrapper {
  @include flexbox();
}

.item {
  @include flex(1 200px);
  @include order(2);
}