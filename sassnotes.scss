
SASS Notes

/*========================================
01a - Nesting
========================================*/

    .main {
        p {
            color: red
        }
    }

compiles to --> .main p { color:red }

/*========================================
01b - Referencing Parents Selector &
========================================*/

    a {
        &:hover {
            color: red
        }
    }

compiles to -->  a:hover { color:red }

/*========================================
01c - Referencing Parents Selector & 2
========================================*/

    .main {
        .sticky & {
            color: red
        }
    }

compiles to -->  .sticky .main {color: red}

/*========================================
01d - Adding Suffixes (BEM)
========================================*/

    .main {
        &-sidebar {
            color: red
        }
    }

compiles to --> .main-sidebar { color: red}

/*========================================
01e - Nested Properties
========================================*/

    .funky {
        font: {
            family: fantasy;
            size: 30em;
            weight: bold;
        }
    }

compiles to -->

    .funky {
        font-family: fantasy;
        font-size: 30em;
        font-weight: bold; }

/*========================================
02 - Variables
========================================*/

    $width: 5em;

    .main {
        width: $width;
    }

/*!global Variables*/
/*
    Variables are only available locally inside the block
    unless it's given the !global flag, then it'll be available globally
    Does it extend that to other documents? No, it's only available globally in the document
*/

    .main2 {
        $size: 50px !global;
        width: $width;
    }

/*!default Variables*/
/*
    You can assign to variables if they aren’t already assigned by adding the !default flag to the end of the value. 
    This means that if the variable has already been assigned to, 
    it won’t be re-assigned, but if it doesn’t have a value yet, it will be given one.
*/

    .main2 {
        $size: 50px !default;
        width: $width;
    }

/*
if you define a variable called $main-width, you can access it as $main_width, and vice versa.
*/

    $main-width == $main_width;

/*========================================
03 - @-rules & directives
==========================================
03a - @import
========================================*/

/*Sass extends the CSS @import rule to allow it to import SCSS and Sass files.*/

    @import 'mixins';
    @import 'all';

/*Multiple Imports*/

    @import "rounded-corners", "text-shadow";

/*Import with interpolation*/

    $family: unquote("Droid+Sans");
    @import url("http://fonts.googleapis.com/css?family=#{$family}");

/*Import partials*/

    _colors.scss.
    @import "colors";

/*nested*/
    #main {
        @import "example";
    }

/*========================================
03b - @media
========================================*/

/*case 1*/

    .sidebar {
        width: 300px;
        @media screen and (orientation: landscape) {
            width: 500px;
        }
    }

compiles to -->

    .sidebar {
        width: 300px; 
    }

    @media screen and (orientation: landscape) {
        .sidebar {
            width: 500px; 
        } 
    }

/*case 2*/

    $media: screen;
    $feature: -webkit-min-device-pixel-ratio;
    $value: 1.5;

    @media #{$media} and ($feature: $value) {
        .sidebar {
            width: 500px;
        }
    }

/*========================================
03c - @extend - Selector Inheritance
========================================*/

    .error {
      border: 1px #f00;
      background-color: #fdd;
    }

    .seriousError {
      border-width: 3px;
    }

Using @extend

    .error {
      border: 1px #f00;
      background-color: #fdd;
    }
    .seriousError {
      @extend .error;
      border-width: 3px;
    }

Compiles to -->

    .error, .seriousError {
      border: 1px #f00;
      background-color: #fdd;
    }

    .seriousError {
      border-width: 3px;
    }

    /*========================================
    Placeholder Selectors: %
    ========================================*/
    /*They’re meant to be used with the @extend directive; for more information see @extend-Only Selectors.*/

/*========================================
03d - @at-root
========================================*/
/*The @at-root directive causes one or more rules to be emitted at the root of the document, rather than being nested beneath their parent */

    .main {
        background-color: gray;
        @at-root .child{color:red};
    }

Compiles to -->
    .main {background-color: gray;}
    .child {background-color: red;}

/*
@debug
@warn
*/

/*========================================
03e - @if
========================================*/

/*Case 1*/

    p {
        @if 1 + 1 == 2 { border: 1px solid;  }
        @if 5 < 3      { border: 2px dotted; }
        @if null       { border: 3px double; }
    }

Compiles to -->

    p {
        border: 1px solid; 
    }

/*Case 2*/
    $type: monster;
    p {
        @if $type == ocean {
            color: blue;
        } @else if $type == matador {
            color: red;
        } @else if $type == monster {
            color: green;
        } @else {
            color: black;
        }
    }

Compiles to -->
    p { 
        color: green; 
    }

/*========================================
03f - @for
========================================*/
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

.item-1 {width: 2em;}
.item-2 {width: 4em;}
.item-3 {width: 6em;}

/*========================================
03g - @each
========================================*/

/*Case 1*/

    @each $animal in puma, sea-slug, egret, salamander {
        .#{$animal}-icon {
            background-image: url('/images/#{$animal}.png');
        }
    }

    .puma-icon { background-image: url('/images/puma.png'); }
    .sea-slug-icon { background-image: url('/images/sea-slug.png'); }
    .egret-icon { background-image: url('/images/egret.png'); }
    .salamander-icon { background-image: url('/images/salamander.png');}

/*Case 2*/

    @each $animal, $color, $cursor in (puma, black, default),
                                      (sea-slug, blue, pointer),
                                      (egret, white, move) {
      .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
        border: 2px solid $color;
        cursor: $cursor;
      }
    }

    .puma-icon {
        background-image: url('/images/puma.png');
        border: 2px solid black;
        cursor: default; 
    }
    .sea-slug-icon {
        background-image: url('/images/sea-slug.png');
        border: 2px solid blue;
        cursor: pointer; 
    }
    .egret-icon {
        background-image: url('/images/egret.png');
        border: 2px solid white;
        cursor: move; 
    }

/*Case 3*/

    @each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
        #{$header} {
            font-size: $size;
        }
    }

    h1 {  font-size: 2em; }
    h2 {  font-size: 1.5em; }
    h3 {  font-size: 1.2em; }

/*========================================
03h - @while
========================================*/

$i: 6;
@while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
}

.item-6 {  width: 12em; }
.item-4 {  width: 8em; }
.item-2 {  width: 4em; }


/*========================================
Interpolation
========================================*/
/*You can also use SassScript variables in selectors and property names using #{} interpolation syntax*/

/*EXAMPLES*/
$name: foo;
$attr: border;
p.#{$name} {
    #{$attr}-color: blue;
}

p {
    $font-size: 12px;
    $line-height: 30px;
    font: #{$font-size}/#{$line-height};
}


/*========================================
Mixins
========================================*/
/* Mixins are included in the document with the @include directive. */
/* block containing the contents of the mixin */

    @mixin large-text {
        font: {
            family: Arial;
            size: 20px;
            weight: bold;
        }
            color: #ff0000;
    }

/*Mixin Referencing the parents*/

    @mixin clearfix {
        display: inline-block;

        &:after {
            content: ".";
            display: block;
            height: 0;
            clear: both;
            visibility: hidden;
        }
    }

/*Referencing Mixins outside of CSS blocks*/

    @mixin silly-links {
        a {
            color: blue;
            background-color: red;
        }
    }
    @include silly-links;

/*Arguments*/

    @mixin sexy-border($color, $width) {
        border: {
            color: $color;
            width: $width;
            style: dashed;
        }
    }

/* Default Argument Value */

    @mixin sexy-border($color, $width: 1in) {
        border: {
            color: $color;
            width: $width;
            style: dashed;
        }
    }

    p { @include sexy-border(blue); }
    h1 { @include sexy-border(blue, 2in); }

    /*h1 is not given a $width value and was assigned the default*/
    p {
        border-color: blue;
        border-width: 1in;
        border-style: dashed; 
    }

    h1 {
        border-color: blue;
        border-width: 2in;
        border-style: dashed; 
    }

/* Unknown number of variables */

    /*Sometimes it makes sense for a mixin or function to take an unknown number of arguments.*/
    @mixin box-shadow($shadows...) {
      -moz-box-shadow: $shadows;
      -webkit-box-shadow: $shadows;
      box-shadow: $shadows;
    }

/* Mapping */

    @mixin colors($text, $background, $border) {
        color: $text;
        background-color: $background;
        border-color: $border;
    }

    $values: #ff0000, #00ff00, #0000ff;
    .primary {
        @include colors($values...);
    }

    $value-map: (text: #00ff00, background: #0000ff, border: #ff0000);
    .secondary {
        @include colors($value-map...);
    }

/*========================================
@content 
========================================*/
/* It is possible to pass a block of styles to the mixin for placement within the styles included by the mixin. */

    @mixin apply-to-ie6-only {
        .container {
            @content;
        }
    }

    @include apply-to-ie6-only {
        #logo {
            background-image: url(/logo.gif);
        }
    }

Compiles to -->

    .container #logo {
        background-image: url(/logo.gif);
    }

/*Case 2*/

    $color: white;
    @mixin colors($color: blue) {
        background-color: $color;
        @content;
        border-color: $color;
    }
    .colors {
        @include colors { color: $color; }
    }

Compiles to -->
    .colors {
        background-color: blue;
        color: white;
        border-color: blue;
    }

/*========================================
@function 
========================================*/

    $grid-width: 40px;
    $gutter-width: 10px;

    @function grid-width($n) {
        @return $n * $grid-width + ($n - 1) * $gutter-width;
    }

    #sidebar { width: grid-width(5); }

Compiles to -->

    #sidebar { width: 240px; }